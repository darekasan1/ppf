name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=build" >> "$GITHUB_OUTPUT"

    # CMake ビルドキャッシュ
    - name: Cache CMake build
      uses: actions/cache@v4
      with:
        path: ${{ steps.strings.outputs.build-output-dir }}
        key: ${{ runner.os }}-${{ matrix.c_compiler }}-cmake-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.c_compiler }}-cmake-

    # コンパイラキャッシュ (ccache for Linux, sccache for all)
    - name: Setup ccache (Linux)
      if: runner.os == 'Linux'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ matrix.os }}-${{ matrix.c_compiler }}
        max-size: 500M

    - name: Setup sccache (Windows)
      if: runner.os == 'Windows'
      uses: mozilla-actions/sccache-action@v0.0.6

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    # Linux 用 zip
    - name: Package artifact (Linux)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        zip -r build-${{ matrix.os }}-${{ matrix.c_compiler }}.zip ${{ steps.strings.outputs.build-output-dir }}

    # Windows 用 zip
    - name: Package artifact (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path "${{ steps.strings.outputs.build-output-dir }}\*" -DestinationPath "build-${{ matrix.os }}-${{ matrix.c_compiler }}.zip"

    - name: Upload artifact for release
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: build-${{ matrix.os }}-${{ matrix.c_compiler }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release files
      run: |
        mkdir -p release-files
        find artifacts -name "*.zip" -exec cp {} release-files/ \;
        ls -la release-files/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: "Release ${{ github.run_number }}"
        draft: false
        prerelease: false
        files: release-files/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
